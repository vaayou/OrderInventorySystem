<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/OrderInvertory/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/OrderInvertory/Dockerfile" />
              <option name="originalContent" value="# syntax=docker/dockerfile:1&#10;&#10;# Build stage&#10;FROM maven:3.9.8-eclipse-temurin-21 AS build&#10;WORKDIR /app&#10;COPY pom.xml .&#10;RUN mvn -B -q -e -DskipTests dependency:go-offline&#10;COPY src ./src&#10;RUN mvn -B -q -DskipTests package&#10;&#10;# Runtime stage&#10;FROM eclipse-temurin:21-jre-jammy&#10;WORKDIR /app&#10;&#10;# Install curl for docker-compose healthcheck&#10;RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends curl \&#10;  &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Copy the built jar&#10;COPY --from=build /app/target/*.jar /app/app.jar&#10;&#10;EXPOSE 8080&#10;ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app/app.jar&quot;]&#10;" />
              <option name="updatedContent" value="# syntax=docker/dockerfile:1&#10;&#10;# Build stage&#10;FROM maven:3.9.8-eclipse-temurin-21-alpine AS build&#10;WORKDIR /app&#10;&#10;# Copy Maven wrapper and pom.xml&#10;COPY mvnw* ./&#10;COPY pom.xml .&#10;COPY .mvn .mvn&#10;&#10;# Make mvnw executable&#10;RUN chmod +x ./mvnw&#10;&#10;# Download dependencies&#10;RUN ./mvnw dependency:go-offline -B&#10;&#10;# Copy source code&#10;COPY src ./src&#10;&#10;# Build the application&#10;RUN ./mvnw clean package -DskipTests&#10;&#10;# Runtime stage&#10;FROM eclipse-temurin:21-jre-alpine&#10;WORKDIR /app&#10;&#10;# Install curl for healthcheck and create app user&#10;RUN apk add --no-cache curl &amp;&amp; \&#10;    addgroup -g 1001 -S spring &amp;&amp; \&#10;    adduser -u 1001 -S spring -G spring&#10;&#10;# Copy the built jar&#10;COPY --from=build /app/target/*.jar /app/app.jar&#10;&#10;# Change ownership&#10;RUN chown -R spring:spring /app&#10;&#10;# Switch to non-root user&#10;USER spring:spring&#10;&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \&#10;    CMD curl -f http://localhost:8080/api/customers || exit 1&#10;&#10;ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="&#10;&#10;services:&#10;  # MySQL Database&#10;  mysql:&#10;    image: mysql:8.0&#10;    container_name: order-inventory-db&#10;    restart: unless-stopped&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: rootpassword&#10;      MYSQL_DATABASE: order_inventory&#10;      MYSQL_USER: app_user&#10;      MYSQL_PASSWORD: app_password&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;      - ./mysql-init:/docker-entrypoint-initdb.d&#10;    networks:&#10;      - order-inventory-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;]&#10;      timeout: 20s&#10;      retries: 10&#10;&#10;  # Backend Spring Boot Application&#10;  backend:&#10;    build:&#10;      context: ./OrderInvertory&#10;      dockerfile: Dockerfile&#10;    container_name: order-inventory-backend&#10;    restart: unless-stopped&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_inventory?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&#10;      SPRING_DATASOURCE_USERNAME: app_user&#10;      SPRING_DATASOURCE_PASSWORD: app_password&#10;      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver&#10;      SPRING_JPA_HIBERNATE_DDL_AUTO: update&#10;      SPRING_JPA_SHOW_SQL: true&#10;      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect&#10;      SERVER_PORT: 8080&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;    networks:&#10;      - order-inventory-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8080/actuator/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 5&#10;      start_period: 40s&#10;&#10;  # Frontend React Application&#10;  frontend:&#10;    build:&#10;      context: ./frontend&#10;      dockerfile: Dockerfile&#10;    container_name: order-inventory-frontend&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;80:80&quot;&#10;    depends_on:&#10;      - backend&#10;    networks:&#10;      - order-inventory-network&#10;    environment:&#10;      - NODE_ENV=production&#10;&#10;volumes:&#10;  mysql_data:&#10;    driver: local&#10;&#10;networks:&#10;  order-inventory-network:&#10;    driver: bridge&#10;" />
              <option name="updatedContent" value="services:&#10;  # MySQL Database&#10;  mysql:&#10;    image: mysql:8.0&#10;    container_name: order-inventory-db&#10;    restart: unless-stopped&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: rootpassword&#10;      MYSQL_DATABASE: order_inventory&#10;      MYSQL_USER: app_user&#10;      MYSQL_PASSWORD: app_password&#10;    ports:&#10;      - &quot;3306:3306&quot;&#10;    volumes:&#10;      - mysql_data:/var/lib/mysql&#10;    networks:&#10;      - order-inventory-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-h&quot;, &quot;localhost&quot;, &quot;-u&quot;, &quot;root&quot;, &quot;-prootpassword&quot;]&#10;      timeout: 20s&#10;      retries: 10&#10;      interval: 30s&#10;      start_period: 30s&#10;&#10;  # Backend Spring Boot Application&#10;  backend:&#10;    build:&#10;      context: ./OrderInvertory&#10;      dockerfile: Dockerfile&#10;    container_name: order-inventory-backend&#10;    restart: unless-stopped&#10;    environment:&#10;      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_inventory?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&#10;      SPRING_DATASOURCE_USERNAME: app_user&#10;      SPRING_DATASOURCE_PASSWORD: app_password&#10;      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver&#10;      SPRING_JPA_HIBERNATE_DDL_AUTO: update&#10;      SPRING_JPA_SHOW_SQL: true&#10;      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect&#10;      SERVER_PORT: 8080&#10;      JAVA_OPTS: &quot;-Xms512m -Xmx1024m&quot;&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    depends_on:&#10;      mysql:&#10;        condition: service_healthy&#10;    networks:&#10;      - order-inventory-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8080/api/customers&quot;, &quot;||&quot;, &quot;exit&quot;, &quot;1&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 5&#10;      start_period: 60s&#10;&#10;  # Frontend React Application&#10;  frontend:&#10;    build:&#10;      context: ./frontend&#10;      dockerfile: Dockerfile&#10;    container_name: order-inventory-frontend&#10;    restart: unless-stopped&#10;    ports:&#10;      - &quot;80:80&quot;&#10;    depends_on:&#10;      backend:&#10;        condition: service_healthy&#10;    networks:&#10;      - order-inventory-network&#10;    environment:&#10;      - NODE_ENV=production&#10;      - REACT_APP_API_URL=http://localhost:8080&#10;&#10;volumes:&#10;  mysql_data:&#10;    driver: local&#10;&#10;networks:&#10;  order-inventory-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/Dockerfile" />
              <option name="originalContent" value="# syntax=docker/dockerfile:1&#10;&#10;# Build stage&#10;FROM node:18-alpine AS build&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;&#10;# Install dependencies&#10;RUN npm ci --only=production&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Build the application&#10;RUN npm run build&#10;&#10;# Production stage&#10;FROM nginx:alpine&#10;WORKDIR /usr/share/nginx/html&#10;&#10;# Remove default nginx static assets&#10;RUN rm -rf ./*&#10;&#10;# Copy built assets from build stage&#10;COPY --from=build /app/dist .&#10;&#10;# Copy custom nginx configuration&#10;COPY nginx.conf /etc/nginx/conf.d/default.conf&#10;&#10;# Create nginx user and set permissions&#10;RUN addgroup -g 101 -S nginx &amp;&amp; \&#10;    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx &amp;&amp; \&#10;    chown -R nginx:nginx /usr/share/nginx/html &amp;&amp; \&#10;    chown -R nginx:nginx /var/cache/nginx &amp;&amp; \&#10;    chown -R nginx:nginx /var/log/nginx &amp;&amp; \&#10;    chown -R nginx:nginx /etc/nginx/conf.d&#10;&#10;# Switch to non-root user&#10;USER nginx&#10;&#10;# Expose port 80&#10;EXPOSE 80&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \&#10;    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1&#10;&#10;# Start nginx&#10;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]&#10;" />
              <option name="updatedContent" value="# syntax=docker/dockerfile:1&#10;&#10;# Build stage&#10;FROM node:18-alpine AS build&#10;WORKDIR /app&#10;&#10;# Copy package files&#10;COPY package*.json ./&#10;&#10;# Install dependencies&#10;RUN npm ci --only=production&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Build the application&#10;RUN npm run build&#10;&#10;# Production stage&#10;FROM nginx:alpine&#10;WORKDIR /usr/share/nginx/html&#10;&#10;# Remove default nginx static assets&#10;RUN rm -rf ./*&#10;&#10;# Copy built assets from build stage&#10;COPY --from=build /app/dist .&#10;&#10;# Copy custom nginx configuration&#10;COPY nginx.conf /etc/nginx/conf.d/default.conf&#10;&#10;# Install wget for health check&#10;RUN apk add --no-cache wget&#10;&#10;# Expose port 80&#10;EXPOSE 80&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \&#10;    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1&#10;&#10;# Start nginx&#10;CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/setup-amazon-linux.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/setup-amazon-linux.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Amazon Linux 2 Setup Script for Order Inventory System&#10;set -e&#10;&#10;echo &quot;=== Order Inventory System - Amazon Linux 2 Setup ===&quot;&#10;&#10;# Update system&#10;echo &quot;Updating system packages...&quot;&#10;sudo yum update -y&#10;&#10;# Install Docker&#10;echo &quot;Installing Docker...&quot;&#10;sudo yum install -y docker&#10;sudo systemctl start docker&#10;sudo systemctl enable docker&#10;sudo usermod -a -G docker ec2-user&#10;&#10;# Install Docker Compose&#10;echo &quot;Installing Docker Compose...&quot;&#10;sudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose&#10;sudo chmod +x /usr/local/bin/docker-compose&#10;sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose&#10;&#10;# Verify installations&#10;echo &quot;Verifying installations...&quot;&#10;docker --version&#10;docker-compose --version&#10;&#10;echo &quot;=== Setup Complete ===&quot;&#10;echo &quot;Please log out and log back in for Docker group changes to take effect.&quot;&#10;echo &quot;Then run: docker-compose up -d --build&quot;&#10;echo &quot;&quot;&#10;echo &quot;Access points after running:&quot;&#10;echo &quot;- Frontend: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)&quot;&#10;echo &quot;- Backend API: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080&quot;&#10;echo &quot;- MySQL: $(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):3306&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>